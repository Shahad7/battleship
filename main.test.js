const { ship, gameBoard, Player, Bot } = require('./main.js');

test('ship damage', () => {
	let carrier = ship(5, 'c');
	carrier.hit();
	carrier.hit();
	expect(carrier.getHits()).toBe(2);
});

test('has it sunken?', () => {
	let destroyer = ship(2, 'd1');
	destroyer.hit();
	destroyer.hit();
	expect(destroyer.isSunk()).toBe(true);
});

test('moving ships to coordinates horizontally', () => {
	let testingBoard = gameBoard();

	// prettier-ignore
	expect(testingBoard.placeShips([0, 1], 5, 0, 'c')).toEqual([
		['_', 'c', 'c', 'c', 'c', 'c', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
	]);
});

test('moving ships to coordinates vertically', () => {
	let testingBoard = gameBoard();

	// prettier-ignore
	expect(testingBoard.placeShips([1, 3], 3, 1, 'c')).toEqual([
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', 'c', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', 'c', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', 'c', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
	]);
});

test('receiving hit', () => {
	let testingBoard = gameBoard();
	testingBoard.setBoard([
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', 'b1', 'b1', 'b1', 'b1'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
	]);

	expect(testingBoard.receiveAttacks([6, 6])).toEqual([
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', 'h', 'b1', 'b1', 'b1'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
	]);
});

test('receiving miss', () => {
	let testingBoard = gameBoard();
	testingBoard.setBoard([
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', 'c', 'c', 'c', 'c'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
	]);

	expect(testingBoard.receiveAttacks([5, 6])).toEqual([
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', 'm', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', 'c', 'c', 'c', 'c'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
	]);
});

test('reporting ships status', () => {
	let testingBoard = gameBoard();

	let destroyer = ship(2);
	destroyer.hit();
	destroyer.hit();

	let carrier = ship(5);
	carrier.hit();
	carrier.hit();
	testingBoard.addShips([destroyer, carrier]);
	expect(testingBoard.reportStatus()).toBe(false);
});

test('reporting ships status 2', () => {
	let testingBoard = gameBoard();

	let destroyer = ship(2);
	destroyer.hit();
	destroyer.hit();

	let carrier = ship(5);
	carrier.hit();
	carrier.hit();
	carrier.hit();
	carrier.hit();
	carrier.hit();
	testingBoard.addShips([destroyer, carrier]);
	expect(testingBoard.reportStatus()).toBe(true);
});

test("is bot's move valid?", () => {
	let bot = Bot();
	let board = [
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', 'm', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', 's', 's', 's', 's'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
		['_', '_', '_', '_', '_', '_', '_', '_', '_', '_'],
	];
	let [x, y] = bot.makeMove(board);
	expect(board[x][y] == 's' || board[x][y] == '_').toBeTruthy();
});
